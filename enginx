#!/bin/bash

# ENGINX - A tool to output common information that is gathered when looking at nginx access logs.

##### Constants

DATE=$(date +"%Y-%m-%d")		# Today's date in YYYY-MM-DD format.
TITLE="NGINX ACCESS LOG INFORMATION FOR $DATE by $USER"		# Title information. Probably will get removed.
START_TIME=$(date -d 'now - 3 hours' +%T)		# Start time is set to default as 3 hours ago from current time in HH:MM:SS format.
END_TIME=$(date +"%T")			# End time is current time in HH:MM:SS format.
IP="127.0.0.1"				# Default IP address.
NGINX="/etc/init.d/nginx"		# Path for nginx dependency check
TIMEGREP="/usr/local/bin/timegrep"	# Path for timegrep dependency check

##### Functions

# Makes sure this program is ran as root.
root_check()
{
  if [ $EUID != 0 ]; then
    echo -e "Please run as root..."
    exit
  fi
}

# Clean termination from when closed with CTRL+C.
control_c()
{
  echo -en "\nGoodbye.\n"
  exit $?
}

trap control_c SIGINT

# Verifies nginx dependency.
nginx_dependency()
{
  if [ -f !$NGINX ]; then
    echo -e "Nginx is not installed! Exiting..."
    exit
  fi
}

# Verifies timegrep dependency.
timegrep_dependency()
{
  if [ -f !$TIMEGREP ]; then
    echo -e "Timegrep is not installed! 'sudo pip install timegrep' to install. Exiting..."
    exit
  fi
}

# Input for custom START_TIME.
start_time()
{
  echo -e "Enter the start time in HH:MM:SS 24-Hour format > \c"
  read START_TIME
}

# Input for custom END_TIME.
end_time()
{
  echo -e "Enter the end time in HH:MM:SS 24-Hour format > \c"
  read END_TIME
}

# Input for custom DATE.
current_date()
{
  echo -e "Use today's date? (y/n) > \c"
  read response
  if [ "$response" != "y" ]; then
    echo -e "Enter the date in YYYY-MM-DD format > \c"
    read DATE
  fi
}

# Outputs the nginx status.
nginx_status()
{
  echo "NGINX SERVICE STATUS > "
  service nginx status
}

# Returns the count of all unique IP addresses per given time range.
# Make sure that the path is accurate for your access logs.
ip_count()
{
  echo "UNIQUE IP COUNT PER TIME PERIOD."
  find /home/b10c/qa_access_logs/ -type f -name '*.access.log' -exec /usr/local/bin/timegrep -d $DATE --start-time=$START_TIME --end-time=$END_TIME '{}' \; | awk '{print $1}' | sort | uniq -c | sort -rn | head -20
}

# Returns the count of all unique HTTP methods per given time range.
# Make sure that the path is accurate for your access logs.
http_methods_count()
{
  echo "UNIQUE HTTP METHOD COUNT PER PERIOD."
  find /home/b10c/qa_access_logs/ -type f -name '*.access.log' -exec /usr/local/bin/timegrep -d $DATE --start-time=$START_TIME --end-time=$END_TIME '{}' \; | awk '{print $6}' | sort | uniq -c | sort -rn | head -20
}

# Returns the count of all unique page requests per given time range.
# Make sure that the path is accurate for your access logs.
requests_count()
{
  echo "UNIQUE REQUESTS PER PERIOD."
  find /home/b10c/qa_access_logs/ -type f -name '*.access.log' -exec /usr/local/bin/timegrep -d $DATE --start-time=$START_TIME --end-time=$END_TIME '{}' \; | awk '{print $7}' | sort | uniq -c | sort -rn | head -20
}

# Returns IP specific information.
# Make sure that the path is accurate for your access logs.
ip_specific_info()
{
  echo -e "Enter IP to target > \c"
  read IP
  echo "Using ipaddr: $IP"
  find /home/b10c/qa_access_logs/ -type f -name '*.access.log' -exec /usr/local/bin/timegrep -d $DATE --start-time=$START_TIME --end-time=$END_TIME '{}' \; | grep $IP
}

# Returns IP specific information.
# Make sure that the path is accurate for your access logs.
# ********* This should get looked at and improved. Kind of a shitty duplicate of ip_specific_info
ip_specific_non_inter()
{
  echo -e "Using ipaddr: $IP"
  find /home/b10c/qa_access_logs/ -type f -name '*.access.log' -exec /usr/local/bin/timegrep -d $DATE --start-time=$START_TIME --end-time=$END_TIME '{}' \; | grep $IP
}

# Usage information for enginx.
usage()
{
  echo -e "\nA tool to output common information that is gathered when looking at nginx access logs.

usage: enginx [-Irishmx start_time end_time ip_addr date]\n
-I 					Turn on Interactive mode.
-r start_time end_time date 		Returns count of unique page requests.
-i start_time end_time date		Returns count of unique IPs.
-s 					Returns nginx status.
-h					Displays help.
-m start_time end_time date		Returns count of unique methods.
-x start_time end_time ip_addr date		Returns IP specific information.

Formats to use for input:

Date format: YYYY-MM-DD
Time format: HH:MM:SS
"
}

# When enabled, provides a different more appealing view mode.
interactive_mode()
{
  start_time
  end_time
  current_date

  selection=
  until [ "$selection" = "0" ]; do
    echo "
+---------------------------------------------------------------+
|               ENGINX INTERACTIVE MENU                         |
|---------------------------------------------------------------|
|       1 - Display nginx service status                        |
|       2 - Get unique IP count per time range                  |
|       3 - Get count of unique HTTP methods per time range     |
|       4 - Get count of unique requests per time range         |
|       5 - Get IP specific information                         |
|                                                               |
|       0 - Exit                                                |
+---------------------------------------------------------------+
"
    echo -e "Enter selection > \c"
    read selection
    echo ""
    case $selection in
      1 ) nginx_status ;;
      2 ) ip_count ;;
      3 ) http_methods_count ;;
      4 ) requests_count ;;
      5 ) ip_specific_info ;;
      0 ) exit ;;
      * ) usage ;;
    esac
  done
}

##### Main

# Main progam application.

root_check
#nginx_dependency
timegrep_dependency

if [ "$1" = "" ]; then
	usage
fi

while [ "$1" != "" ]; do
  case $1 in
    -I | --interactive )      interactive_mode ;;
    -i )                      shift
                              START_TIME=$1
                              END_TIME=$2
                              DATE=$3
                              ip_count ;;

    -m )                      shift
                              START_TIME=$1
                              END_TIME=$2
                              DATE=$3
                              http_methods_count ;;

    -r )                      shift
                              START_TIME=$1
                              END_TIME=$2
                              DATE=$3
                              requests_count ;;

    -x )                      shift
                              START_TIME=$1
                              END_TIME=$2
                              IP=$3
                              DATE=$4
                              ip_specific_non_inter ;;

    -s | --status )           nginx_status ;;
    -h | --help )             usage
                              exit
                              ;;
  esac
  shift
done
